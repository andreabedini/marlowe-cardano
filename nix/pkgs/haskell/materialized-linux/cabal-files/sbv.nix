{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  ({
    flags = {};
    package = {
      specVersion = "2.2";
      identifier = { name = "sbv"; version = "9.0"; };
      license = "BSD-3-Clause";
      copyright = "Levent Erkok, 2010-2022";
      maintainer = "Levent Erkok (erkokl@gmail.com)";
      author = "Levent Erkok";
      homepage = "http://leventerkok.github.io/sbv/";
      url = "";
      synopsis = "SMT Based Verification: Symbolic Haskell theorem prover using SMT solving.";
      description = "Express properties about Haskell programs and automatically prove them using SMT\n(Satisfiability Modulo Theories) solvers.\n\nFor details, please see: <http://leventerkok.github.io/sbv/>";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs."base" or (errorHandler.buildDepError "base"))
          (hsPkgs."QuickCheck" or (errorHandler.buildDepError "QuickCheck"))
          (hsPkgs."template-haskell" or (errorHandler.buildDepError "template-haskell"))
          (hsPkgs."array" or (errorHandler.buildDepError "array"))
          (hsPkgs."async" or (errorHandler.buildDepError "async"))
          (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
          (hsPkgs."deepseq" or (errorHandler.buildDepError "deepseq"))
          (hsPkgs."directory" or (errorHandler.buildDepError "directory"))
          (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
          (hsPkgs."time" or (errorHandler.buildDepError "time"))
          (hsPkgs."pretty" or (errorHandler.buildDepError "pretty"))
          (hsPkgs."process" or (errorHandler.buildDepError "process"))
          (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
          (hsPkgs."random" or (errorHandler.buildDepError "random"))
          (hsPkgs."syb" or (errorHandler.buildDepError "syb"))
          (hsPkgs."text" or (errorHandler.buildDepError "text"))
          (hsPkgs."transformers" or (errorHandler.buildDepError "transformers"))
          (hsPkgs."uniplate" or (errorHandler.buildDepError "uniplate"))
          (hsPkgs."libBF" or (errorHandler.buildDepError "libBF"))
          ];
        buildable = true;
        };
      tests = {
        "SBVTest" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
            (hsPkgs."sbv" or (errorHandler.buildDepError "sbv"))
            (hsPkgs."directory" or (errorHandler.buildDepError "directory"))
            (hsPkgs."random" or (errorHandler.buildDepError "random"))
            (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
            (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
            (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
            (hsPkgs."tasty" or (errorHandler.buildDepError "tasty"))
            (hsPkgs."tasty-golden" or (errorHandler.buildDepError "tasty-golden"))
            (hsPkgs."tasty-hunit" or (errorHandler.buildDepError "tasty-hunit"))
            (hsPkgs."tasty-quickcheck" or (errorHandler.buildDepError "tasty-quickcheck"))
            (hsPkgs."QuickCheck" or (errorHandler.buildDepError "QuickCheck"))
            ];
          buildable = true;
          };
        "SBVConnections" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."sbv" or (errorHandler.buildDepError "sbv"))
            ];
          buildable = true;
          };
        "SBVDocTest" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."sbv" or (errorHandler.buildDepError "sbv"))
            (hsPkgs."process" or (errorHandler.buildDepError "process"))
            (hsPkgs."QuickCheck" or (errorHandler.buildDepError "QuickCheck"))
            (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
            (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
            (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
            (hsPkgs."directory" or (errorHandler.buildDepError "directory"))
            (hsPkgs."tasty" or (errorHandler.buildDepError "tasty"))
            (hsPkgs."tasty-quickcheck" or (errorHandler.buildDepError "tasty-quickcheck"))
            (hsPkgs."tasty-golden" or (errorHandler.buildDepError "tasty-golden"))
            (hsPkgs."tasty-hunit" or (errorHandler.buildDepError "tasty-hunit"))
            ];
          buildable = true;
          };
        "SBVHLint" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."directory" or (errorHandler.buildDepError "directory"))
            (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
            (hsPkgs."hlint" or (errorHandler.buildDepError "hlint"))
            (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
            (hsPkgs."tasty" or (errorHandler.buildDepError "tasty"))
            (hsPkgs."tasty-golden" or (errorHandler.buildDepError "tasty-golden"))
            (hsPkgs."tasty-hunit" or (errorHandler.buildDepError "tasty-hunit"))
            (hsPkgs."tasty-quickcheck" or (errorHandler.buildDepError "tasty-quickcheck"))
            (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
            (hsPkgs."QuickCheck" or (errorHandler.buildDepError "QuickCheck"))
            (hsPkgs."sbv" or (errorHandler.buildDepError "sbv"))
            ];
          buildable = true;
          };
        };
      benchmarks = {
        "SBVBench" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
            (hsPkgs."sbv" or (errorHandler.buildDepError "sbv"))
            (hsPkgs."random" or (errorHandler.buildDepError "random"))
            (hsPkgs."time" or (errorHandler.buildDepError "time"))
            (hsPkgs."process" or (errorHandler.buildDepError "process"))
            (hsPkgs."deepseq" or (errorHandler.buildDepError "deepseq"))
            (hsPkgs."tasty" or (errorHandler.buildDepError "tasty"))
            (hsPkgs."tasty-bench" or (errorHandler.buildDepError "tasty-bench"))
            ];
          buildable = true;
          };
        };
      };
    } // {
    src = (pkgs.lib).mkDefault (pkgs.fetchurl {
      url = "http://hackage.haskell.org/package/sbv-9.0.tar.gz";
      sha256 = "9f19072ba88738632b36eec5e2bcd4b5648f048aeacbbe570f1a6f64d1540465";
      });
    }) // {
    package-description-override = "Cabal-Version: 2.2\n\nName        : sbv\nVersion     : 9.0\nCategory    : Formal Methods, Theorem Provers, Bit vectors, Symbolic Computation, Math, SMT\nSynopsis    : SMT Based Verification: Symbolic Haskell theorem prover using SMT solving.\nDescription : Express properties about Haskell programs and automatically prove them using SMT\n               (Satisfiability Modulo Theories) solvers.\n               .\n               For details, please see: <http://leventerkok.github.io/sbv/>\n\nCopyright          : Levent Erkok, 2010-2022\nLicense            : BSD-3-Clause\nLicense-file       : LICENSE\nStability          : Experimental\nAuthor             : Levent Erkok\nHomepage           : http://leventerkok.github.io/sbv/\nBug-reports        : http://github.com/LeventErkok/sbv/issues\nMaintainer         : Levent Erkok (erkokl@gmail.com)\nBuild-Type         : Simple\nData-Files         : SBVTestSuite/GoldFiles/*.gold\nExtra-Source-Files : INSTALL, README.md, COPYRIGHT, CHANGES.md\n\nTested-With        : GHC==9.2.1\n\nsource-repository head\n    type:       git\n    location:   git://github.com/LeventErkok/sbv.git\n\ncommon common-settings\n   default-language: Haskell2010\n   ghc-options     : -Wall -O2\n   build-depends   : base >= 4.11 && < 5\n\n   if impl(ghc >= 8.10.1)\n      ghc-options  : -Wunused-packages\n\nLibrary\n  import          : common-settings\n  default-language: Haskell2010\n  other-extensions: BangPatterns\n                    CPP\n                    ConstraintKinds\n                    DataKinds\n                    DefaultSignatures\n                    DeriveAnyClass\n                    DeriveDataTypeable\n                    DeriveFunctor\n                    DeriveGeneric\n                    FlexibleContexts\n                    FlexibleInstances\n                    FunctionalDependencies\n                    GADTs\n                    GeneralizedNewtypeDeriving\n                    ImplicitParams\n                    InstanceSigs\n                    KindSignatures\n                    LambdaCase\n                    MultiParamTypeClasses\n                    NamedFieldPuns\n                    OverloadedLists\n                    OverloadedStrings\n                    PatternGuards\n                    QuasiQuotes\n                    Rank2Types\n                    RankNTypes\n                    ScopedTypeVariables\n                    StandaloneDeriving\n                    TemplateHaskell\n                    TupleSections\n                    TypeApplications\n                    TypeFamilies\n                    TypeOperators\n                    TypeSynonymInstances\n                    UndecidableInstances\n                    ViewPatterns\n  build-depends   : QuickCheck, template-haskell\n                  , array, async, containers, deepseq, directory, filepath, time\n                  , pretty, process, mtl, random, syb, text, transformers, uniplate\n                  , libBF\n  Exposed-modules : Data.SBV\n                  , Data.SBV.Control\n                  , Data.SBV.Dynamic\n                  , Data.SBV.Either\n                  , Data.SBV.Float\n                  , Data.SBV.Internals\n                  , Data.SBV.List\n                  , Data.SBV.Maybe\n                  , Data.SBV.Rational\n                  , Data.SBV.Set\n                  , Data.SBV.Char\n                  , Data.SBV.String\n                  , Data.SBV.Tuple\n                  , Data.SBV.RegExp\n                  , Data.SBV.Tools.BMC\n                  , Data.SBV.Tools.BoundedList\n                  , Data.SBV.Tools.Induction\n                  , Data.SBV.Tools.BoundedFix\n                  , Data.SBV.Tools.CodeGen\n                  , Data.SBV.Tools.GenTest\n                  , Data.SBV.Tools.Overflow\n                  , Data.SBV.Tools.Polynomial\n                  , Data.SBV.Tools.Range\n                  , Data.SBV.Tools.STree\n                  , Data.SBV.Tools.WeakestPreconditions\n                  , Data.SBV.Trans\n                  , Data.SBV.Trans.Control\n                  , Documentation.SBV.Examples.BitPrecise.BitTricks\n                  , Documentation.SBV.Examples.BitPrecise.BrokenSearch\n                  , Documentation.SBV.Examples.BitPrecise.Legato\n                  , Documentation.SBV.Examples.BitPrecise.MergeSort\n                  , Documentation.SBV.Examples.BitPrecise.MultMask\n                  , Documentation.SBV.Examples.BitPrecise.PrefixSum\n                  , Documentation.SBV.Examples.CodeGeneration.AddSub\n                  , Documentation.SBV.Examples.CodeGeneration.CRC_USB5\n                  , Documentation.SBV.Examples.CodeGeneration.Fibonacci\n                  , Documentation.SBV.Examples.CodeGeneration.GCD\n                  , Documentation.SBV.Examples.CodeGeneration.PopulationCount\n                  , Documentation.SBV.Examples.CodeGeneration.Uninterpreted\n                  , Documentation.SBV.Examples.Crypto.AES\n                  , Documentation.SBV.Examples.Crypto.RC4\n                  , Documentation.SBV.Examples.Crypto.SHA\n                  , Documentation.SBV.Examples.DeltaSat.DeltaSat\n                  , Documentation.SBV.Examples.Existentials.CRCPolynomial\n                  , Documentation.SBV.Examples.Existentials.Diophantine\n                  , Documentation.SBV.Examples.Lists.Fibonacci\n                  , Documentation.SBV.Examples.Lists.Nested\n                  , Documentation.SBV.Examples.Lists.BoundedMutex\n                  , Documentation.SBV.Examples.Lists.CountOutAndTransfer\n                  , Documentation.SBV.Examples.Misc.Definitions\n                  , Documentation.SBV.Examples.Misc.Enumerate\n                  , Documentation.SBV.Examples.Misc.Floating\n                  , Documentation.SBV.Examples.Misc.ModelExtract\n                  , Documentation.SBV.Examples.Misc.NestedArray\n                  , Documentation.SBV.Examples.Misc.Auxiliary\n                  , Documentation.SBV.Examples.Misc.NoDiv0\n                  , Documentation.SBV.Examples.Misc.Newtypes\n                  , Documentation.SBV.Examples.Misc.Polynomials\n                  , Documentation.SBV.Examples.Misc.SetAlgebra\n                  , Documentation.SBV.Examples.Misc.SoftConstrain\n                  , Documentation.SBV.Examples.Misc.Tuple\n                  , Documentation.SBV.Examples.Optimization.Enumerate\n                  , Documentation.SBV.Examples.Optimization.ExtField\n                  , Documentation.SBV.Examples.Optimization.LinearOpt\n                  , Documentation.SBV.Examples.Optimization.Production\n                  , Documentation.SBV.Examples.Optimization.VM\n                  , Documentation.SBV.Examples.ProofTools.BMC\n                  , Documentation.SBV.Examples.ProofTools.Fibonacci\n                  , Documentation.SBV.Examples.ProofTools.Strengthen\n                  , Documentation.SBV.Examples.ProofTools.Sum\n                  , Documentation.SBV.Examples.WeakestPreconditions.Append\n                  , Documentation.SBV.Examples.WeakestPreconditions.Basics\n                  , Documentation.SBV.Examples.WeakestPreconditions.Fib\n                  , Documentation.SBV.Examples.WeakestPreconditions.GCD\n                  , Documentation.SBV.Examples.WeakestPreconditions.IntDiv\n                  , Documentation.SBV.Examples.WeakestPreconditions.IntSqrt\n                  , Documentation.SBV.Examples.WeakestPreconditions.Length\n                  , Documentation.SBV.Examples.WeakestPreconditions.Sum\n                  , Documentation.SBV.Examples.Puzzles.AOC_2021_24\n                  , Documentation.SBV.Examples.Puzzles.Birthday\n                  , Documentation.SBV.Examples.Puzzles.Coins\n                  , Documentation.SBV.Examples.Puzzles.Counts\n                  , Documentation.SBV.Examples.Puzzles.DogCatMouse\n                  , Documentation.SBV.Examples.Puzzles.Drinker\n                  , Documentation.SBV.Examples.Puzzles.Euler185\n                  , Documentation.SBV.Examples.Puzzles.Fish\n                  , Documentation.SBV.Examples.Puzzles.Garden\n                  , Documentation.SBV.Examples.Puzzles.HexPuzzle\n                  , Documentation.SBV.Examples.Puzzles.Jugs\n                  , Documentation.SBV.Examples.Puzzles.LadyAndTigers\n                  , Documentation.SBV.Examples.Puzzles.MagicSquare\n                  , Documentation.SBV.Examples.Puzzles.Murder\n                  , Documentation.SBV.Examples.Puzzles.NQueens\n                  , Documentation.SBV.Examples.Puzzles.SendMoreMoney\n                  , Documentation.SBV.Examples.Puzzles.Sudoku\n                  , Documentation.SBV.Examples.Puzzles.U2Bridge\n                  , Documentation.SBV.Examples.Queries.AllSat\n                  , Documentation.SBV.Examples.Queries.UnsatCore\n                  , Documentation.SBV.Examples.Queries.FourFours\n                  , Documentation.SBV.Examples.Queries.GuessNumber\n                  , Documentation.SBV.Examples.Queries.CaseSplit\n                  , Documentation.SBV.Examples.Queries.Enums\n                  , Documentation.SBV.Examples.Queries.Interpolants\n                  , Documentation.SBV.Examples.Queries.Concurrency\n                  , Documentation.SBV.Examples.Strings.RegexCrossword\n                  , Documentation.SBV.Examples.Strings.SQLInjection\n                  , Documentation.SBV.Examples.Transformers.SymbolicEval\n                  , Documentation.SBV.Examples.Uninterpreted.AUF\n                  , Documentation.SBV.Examples.Uninterpreted.Deduce\n                  , Documentation.SBV.Examples.Uninterpreted.Function\n                  , Documentation.SBV.Examples.Uninterpreted.Multiply\n                  , Documentation.SBV.Examples.Uninterpreted.Shannon\n                  , Documentation.SBV.Examples.Uninterpreted.Sort\n                  , Documentation.SBV.Examples.Uninterpreted.UISortAllSat\n  other-modules   : Data.SBV.Client\n                  , Data.SBV.Client.BaseIO\n                  , Data.SBV.Core.AlgReals\n                  , Data.SBV.Core.Concrete\n                  , Data.SBV.Core.Data\n                  , Data.SBV.Core.Kind\n                  , Data.SBV.Core.Model\n                  , Data.SBV.Core.Operations\n                  , Data.SBV.Core.Floating\n                  , Data.SBV.Core.Sized\n                  , Data.SBV.Core.SizedFloats\n                  , Data.SBV.Core.Symbolic\n                  , Data.SBV.Control.BaseIO\n                  , Data.SBV.Control.Query\n                  , Data.SBV.Control.Types\n                  , Data.SBV.Control.Utils\n                  , Data.SBV.Compilers.C\n                  , Data.SBV.Compilers.CodeGen\n                  , Data.SBV.SMT.SMT\n                  , Data.SBV.SMT.SMTLib\n                  , Data.SBV.SMT.SMTLib2\n                  , Data.SBV.SMT.SMTLibNames\n                  , Data.SBV.SMT.Utils\n                  , Data.SBV.Provers.Prover\n                  , Data.SBV.Provers.ABC\n                  , Data.SBV.Provers.Boolector\n                  , Data.SBV.Provers.Bitwuzla\n                  , Data.SBV.Provers.CVC4\n                  , Data.SBV.Provers.CVC5\n                  , Data.SBV.Provers.DReal\n                  , Data.SBV.Provers.MathSAT\n                  , Data.SBV.Provers.Yices\n                  , Data.SBV.Provers.Z3\n                  , Data.SBV.Utils.CrackNum\n                  , Data.SBV.Utils.ExtractIO\n                  , Data.SBV.Utils.Numeric\n                  , Data.SBV.Utils.TDiff\n                  , Data.SBV.Utils.Lib\n                  , Data.SBV.Utils.PrettyNum\n                  , Data.SBV.Utils.SExpr\n\nTest-Suite SBVTest\n  import           : common-settings\n  default-language : Haskell2010\n  type             : exitcode-stdio-1.0\n  ghc-options      : -with-rtsopts=-K64m\n  other-extensions : DataKinds\n                    DeriveAnyClass\n                    DeriveDataTypeable\n                    FlexibleContexts\n                    GeneralizedNewtypeDeriving\n                    OverloadedLists\n                    OverloadedStrings\n                    Rank2Types\n                    RankNTypes\n                    ScopedTypeVariables\n                    StandaloneDeriving\n                    TemplateHaskell\n                    TupleSections\n                    TypeApplications\n  build-depends   : filepath, sbv, directory, random, mtl, containers\n                  , bytestring, tasty, tasty-golden, tasty-hunit, tasty-quickcheck, QuickCheck\n  hs-source-dirs  : SBVTestSuite\n  main-is         : SBVTest.hs\n  other-modules   : Utils.SBVTestFramework\n                  , TestSuite.Arrays.InitVals\n                  , TestSuite.Arrays.Memory\n                  , TestSuite.Arrays.Query\n                  , TestSuite.Arrays.Caching\n                  , TestSuite.Basics.AllSat\n                  , TestSuite.Basics.ArbFloats\n                  , TestSuite.Basics.ArithNoSolver\n                  , TestSuite.Basics.ArithSolver\n                  , TestSuite.Basics.Assert\n                  , TestSuite.Basics.BarrelRotate\n                  , TestSuite.Basics.BasicTests\n                  , TestSuite.Basics.BoundedList\n                  , TestSuite.Basics.DynSign\n                  , TestSuite.Basics.Exceptions\n                  , TestSuite.Basics.GenBenchmark\n                  , TestSuite.Basics.Higher\n                  , TestSuite.Basics.Index\n                  , TestSuite.Basics.IteTest\n                  , TestSuite.Basics.List\n                  , TestSuite.Basics.ModelValidate\n                  , TestSuite.Basics.ProofTests\n                  , TestSuite.Basics.PseudoBoolean\n                  , TestSuite.Basics.QRem\n                  , TestSuite.Basics.Quantifiers\n                  , TestSuite.Basics.Recursive\n                  , TestSuite.Basics.Set\n                  , TestSuite.Basics.SmallShifts\n                  , TestSuite.Basics.SquashReals\n                  , TestSuite.Basics.String\n                  , TestSuite.Basics.Sum\n                  , TestSuite.Basics.TOut\n                  , TestSuite.Basics.Tuple\n                  , TestSuite.Basics.UISat\n                  , TestSuite.Char.Char\n                  , TestSuite.BitPrecise.BitTricks\n                  , TestSuite.BitPrecise.Legato\n                  , TestSuite.BitPrecise.MergeSort\n                  , TestSuite.BitPrecise.PrefixSum\n                  , TestSuite.CodeGeneration.AddSub\n                  , TestSuite.CodeGeneration.CgTests\n                  , TestSuite.CodeGeneration.CRC_USB5\n                  , TestSuite.CodeGeneration.Fibonacci\n                  , TestSuite.CodeGeneration.Floats\n                  , TestSuite.CodeGeneration.GCD\n                  , TestSuite.CodeGeneration.PopulationCount\n                  , TestSuite.CodeGeneration.Uninterpreted\n                  , TestSuite.CRC.CCITT\n                  , TestSuite.CRC.CCITT_Unidir\n                  , TestSuite.CRC.GenPoly\n                  , TestSuite.CRC.Parity\n                  , TestSuite.CRC.USB5\n                  , TestSuite.Crypto.AES\n                  , TestSuite.Crypto.RC4\n                  , TestSuite.Crypto.SHA\n                  , TestSuite.Existentials.CRCPolynomial\n                  , TestSuite.GenTest.GenTests\n                  , TestSuite.Optimization.AssertWithPenalty\n                  , TestSuite.Optimization.Basics\n                  , TestSuite.Optimization.Combined\n                  , TestSuite.Optimization.ExtensionField\n                  , TestSuite.Optimization.Floats\n                  , TestSuite.Optimization.NoOpt\n                  , TestSuite.Optimization.Quantified\n                  , TestSuite.Optimization.Reals\n                  , TestSuite.Optimization.Tuples\n                  , TestSuite.Overflows.Arithmetic\n                  , TestSuite.Overflows.Casts\n                  , TestSuite.Polynomials.Polynomials\n                  , TestSuite.Puzzles.Coins\n                  , TestSuite.Puzzles.Counts\n                  , TestSuite.Puzzles.DogCatMouse\n                  , TestSuite.Puzzles.Euler185\n                  , TestSuite.Puzzles.MagicSquare\n                  , TestSuite.Puzzles.NQueens\n                  , TestSuite.Puzzles.PowerSet\n                  , TestSuite.Puzzles.Sudoku\n                  , TestSuite.Puzzles.Temperature\n                  , TestSuite.Puzzles.U2Bridge\n                  , TestSuite.Queries.BasicQuery\n                  , TestSuite.Queries.BadOption\n                  , TestSuite.Queries.DSat\n                  , TestSuite.Queries.Enums\n                  , TestSuite.Queries.FreshVars\n                  , TestSuite.Queries.Int_ABC\n                  , TestSuite.Queries.Int_Boolector\n                  , TestSuite.Queries.Int_CVC4\n                  , TestSuite.Queries.Int_Mathsat\n                  , TestSuite.Queries.Int_Yices\n                  , TestSuite.Queries.Int_Z3\n                  , TestSuite.Queries.Interpolants\n                  , TestSuite.Queries.Lists\n                  , TestSuite.Queries.Strings\n                  , TestSuite.Queries.Sums\n                  , TestSuite.Queries.Tables\n                  , TestSuite.Queries.Tuples\n                  , TestSuite.Queries.Uninterpreted\n                  , TestSuite.Queries.UISat\n                  , TestSuite.Queries.UISatEx\n                  , TestSuite.QuickCheck.QC\n                  , TestSuite.Transformers.SymbolicEval\n                  , TestSuite.Uninterpreted.AUF\n                  , TestSuite.Uninterpreted.Axioms\n                  , TestSuite.Uninterpreted.Function\n                  , TestSuite.Uninterpreted.Sort\n                  , TestSuite.Uninterpreted.Uninterpreted\n\nTest-Suite SBVConnections\n    import          : common-settings\n    default-language: Haskell2010\n    build-depends   : sbv\n    hs-source-dirs  : SBVTestSuite\n    main-is         : SBVConnectionTest.hs\n    type:             exitcode-stdio-1.0\n\nTest-Suite SBVDocTest\n    import          : common-settings\n    default-language: Haskell2010\n    build-depends   : base, sbv, process, QuickCheck, filepath, mtl, bytestring, directory\n                    , tasty, tasty-quickcheck, tasty-golden, tasty-hunit\n    other-extensions: DataKinds\n                      DeriveAnyClass\n                      DeriveDataTypeable\n                      FlexibleContexts\n                      GeneralizedNewtypeDeriving\n                      OverloadedLists\n                      OverloadedStrings\n                      Rank2Types\n                      RankNTypes\n                      ScopedTypeVariables\n                      StandaloneDeriving\n                      TemplateHaskell\n                      TupleSections\n                      TypeApplications\n    hs-source-dirs  : SBVTestSuite\n    main-is:          SBVDocTest.hs\n    other-modules   : Utils.SBVTestFramework\n    type:             exitcode-stdio-1.0\n\nTest-Suite SBVHLint\n    import          : common-settings\n    default-language: Haskell2010\n\n    build-depends   : base, directory, filepath\n                    , hlint, bytestring, tasty, tasty-golden, tasty-hunit, tasty-quickcheck, mtl, QuickCheck, sbv\n    other-extensions: DataKinds\n                      DeriveAnyClass\n                      DeriveDataTypeable\n                      FlexibleContexts\n                      GeneralizedNewtypeDeriving\n                      OverloadedLists\n                      OverloadedStrings\n                      Rank2Types\n                      RankNTypes\n                      ScopedTypeVariables\n                      StandaloneDeriving\n                      TemplateHaskell\n                      TupleSections\n                      TypeApplications\n    hs-source-dirs  : SBVTestSuite\n    other-modules   : Utils.SBVTestFramework\n    main-is         : SBVHLint.hs\n    type            : exitcode-stdio-1.0\n\nBenchmark SBVBench\n  import          : common-settings\n  default-language: Haskell2010\n  type            : exitcode-stdio-1.0\n  ghc-options     : -with-rtsopts=-K64m\n  other-extensions: DataKinds\n                    DeriveAnyClass\n                    DeriveDataTypeable\n                    FlexibleContexts\n                    GeneralizedNewtypeDeriving\n                    OverloadedLists\n                    OverloadedStrings\n                    Rank2Types\n                    RankNTypes\n                    ScopedTypeVariables\n                    StandaloneDeriving\n                    TemplateHaskell\n                    TupleSections\n                    TypeApplications\n  build-depends   : filepath, sbv, random, time , process, deepseq, tasty, tasty-bench\n  hs-source-dirs  : SBVBenchSuite\n  main-is         : SBVBench.hs\n  other-modules   : Utils.SBVBenchFramework\n                  , BenchSuite.Bench.Bench\n                  , BenchSuite.Puzzles.Birthday\n                  , BenchSuite.Puzzles.Coins\n                  , BenchSuite.Puzzles.Counts\n                  , BenchSuite.Puzzles.DogCatMouse\n                  , BenchSuite.Puzzles.Euler185\n                  , BenchSuite.Puzzles.Garden\n                  , BenchSuite.Puzzles.LadyAndTigers\n                  , BenchSuite.Puzzles.MagicSquare\n                  , BenchSuite.Puzzles.NQueens\n                  , BenchSuite.Puzzles.SendMoreMoney\n                  , BenchSuite.Puzzles.Sudoku\n                  , BenchSuite.Puzzles.U2Bridge\n                  , BenchSuite.BitPrecise.BitTricks\n                  , BenchSuite.BitPrecise.BrokenSearch\n                  , BenchSuite.BitPrecise.Legato\n                  , BenchSuite.BitPrecise.MergeSort\n                  , BenchSuite.BitPrecise.MultMask\n                  , BenchSuite.BitPrecise.PrefixSum\n                  , BenchSuite.Queries.AllSat\n                  , BenchSuite.Queries.CaseSplit\n                  , BenchSuite.Queries.Concurrency\n                  , BenchSuite.Queries.Enums\n                  , BenchSuite.Queries.FourFours\n                  , BenchSuite.Queries.GuessNumber\n                  , BenchSuite.Queries.Interpolants\n                  , BenchSuite.Queries.UnsatCore\n                  , BenchSuite.WeakestPreconditions.Instances\n                  , BenchSuite.WeakestPreconditions.Append\n                  , BenchSuite.WeakestPreconditions.Basics\n                  , BenchSuite.WeakestPreconditions.Fib\n                  , BenchSuite.WeakestPreconditions.GCD\n                  , BenchSuite.WeakestPreconditions.IntDiv\n                  , BenchSuite.WeakestPreconditions.IntSqrt\n                  , BenchSuite.WeakestPreconditions.Length\n                  , BenchSuite.WeakestPreconditions.Sum\n                  , BenchSuite.Optimization.Instances\n                  , BenchSuite.Optimization.Enumerate\n                  , BenchSuite.Optimization.ExtField\n                  , BenchSuite.Optimization.LinearOpt\n                  , BenchSuite.Optimization.Production\n                  , BenchSuite.Optimization.VM\n                  , BenchSuite.Uninterpreted.AUF\n                  , BenchSuite.Uninterpreted.Deduce\n                  , BenchSuite.Uninterpreted.Function\n                  , BenchSuite.Uninterpreted.Multiply\n                  , BenchSuite.Uninterpreted.Shannon\n                  , BenchSuite.Uninterpreted.Sort\n                  , BenchSuite.Uninterpreted.UISortAllSat\n                  , BenchSuite.ProofTools.BMC\n                  , BenchSuite.ProofTools.Fibonacci\n                  , BenchSuite.ProofTools.Strengthen\n                  , BenchSuite.ProofTools.Sum\n                  , BenchSuite.CodeGeneration.AddSub\n                  , BenchSuite.CodeGeneration.CRC_USB5\n                  , BenchSuite.CodeGeneration.Fibonacci\n                  , BenchSuite.CodeGeneration.GCD\n                  , BenchSuite.CodeGeneration.PopulationCount\n                  , BenchSuite.CodeGeneration.Uninterpreted\n                  , BenchSuite.Crypto.AES\n                  , BenchSuite.Crypto.RC4\n                  , BenchSuite.Crypto.SHA\n                  , BenchSuite.Misc.Auxiliary\n                  , BenchSuite.Misc.Enumerate\n                  , BenchSuite.Misc.Floating\n                  , BenchSuite.Misc.ModelExtract\n                  , BenchSuite.Misc.Newtypes\n                  , BenchSuite.Misc.NoDiv0\n                  , BenchSuite.Misc.Polynomials\n                  , BenchSuite.Misc.SetAlgebra\n                  , BenchSuite.Misc.SoftConstrain\n                  , BenchSuite.Misc.Tuple\n                  , BenchSuite.Lists.BoundedMutex\n                  , BenchSuite.Lists.Fibonacci\n                  , BenchSuite.Lists.Nested\n                  , BenchSuite.Strings.RegexCrossword\n                  , BenchSuite.Strings.SQLInjection\n                  , BenchSuite.Existentials.CRCPolynomial\n                  , BenchSuite.Existentials.Diophantine\n                  , BenchSuite.Transformers.SymbolicEval\n";
    }